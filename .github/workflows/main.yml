name: Main Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          tags: kurmisrainas/stunnel:ci-${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Test that the image can start without errors
          docker run --rm kurmisrainas/stunnel:ci-${{ matrix.platform }} --help || true

          # Test with basic environment variables
          docker run --rm \
            -e ACCEPT=8080 \
            -e CONNECT=example.com:443 \
            kurmisrainas/stunnel:ci-${{ matrix.platform }} --help || true

          echo "âœ… Docker image built and basic tests passed for ${{ matrix.platform }}"

  version:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new-tag: ${{ steps.version.outputs.new-tag }}
      previous-tag: ${{ steps.version.outputs.previous-tag }}
      version-type: ${{ steps.version.outputs.version-type }}
      new-version: ${{ steps.check-version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get previous tag
        id: previous-tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREVIOUS_TAG"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run semantic release
        id: version
        run: |
          npx semantic-release
          # Capture the latest tag after semantic release
          NEW_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version-type=release" >> $GITHUB_OUTPUT
          echo "New tag: $NEW_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if new version was created
        id: check-version
        run: |
          if [ -n "${{ steps.version.outputs.new-tag }}" ]; then
            echo "new-version=true" >> $GITHUB_OUTPUT
            echo "New version: ${{ steps.version.outputs.new-tag }}"
          else
            echo "new-version=false" >> $GITHUB_OUTPUT
            echo "No new version created"
          fi
