name: Semantic Versioning

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.version.outputs.new-tag }}
      previous-tag: ${{ steps.version.outputs.previous-tag }}
      version-type: ${{ steps.version.outputs.version-type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get previous tag
        id: previous-tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREVIOUS_TAG"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic release
        id: version
        run: |
          npx semantic-release
          # Capture the latest tag after semantic release
          NEW_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version-type=release" >> $GITHUB_OUTPUT
          echo "New tag: $NEW_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if new version was created
        id: check-version
        run: |
          if [ -n "${{ steps.version.outputs.new-tag }}" ]; then
            echo "new-version=true" >> $GITHUB_OUTPUT
            echo "New version: ${{ steps.version.outputs.new-tag }}"
          else
            echo "new-version=false" >> $GITHUB_OUTPUT
            echo "No new version created"
          fi

  docker:
    needs: version
    if: needs.version.outputs.new-tag != ''
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: kurmisrainas/stunnel
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

